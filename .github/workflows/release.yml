name: Release

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
          - prerelease
      prerelease_id:
        description: 'Prerelease identifier (beta, alpha, rc)'
        required: false
        default: 'beta'
  
  push:
    tags:
      - 'v*'

jobs:
  create-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Configure Git
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
      
      # Manual version bump (when triggered via workflow_dispatch)
      - name: Bump version manually
        if: github.event_name == 'workflow_dispatch'
        id: manual_version
        run: |
          # Determine version bump command
          if [ "${{ github.event.inputs.version_type }}" == "prerelease" ]; then
            npm version prerelease --preid=${{ github.event.inputs.prerelease_id }} --no-git-tag-version
          else
            npm version ${{ github.event.inputs.version_type }} --no-git-tag-version
          fi
          
          # Get the new version
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          
          # Update version in src/cli.ts
          sed -i "s/version: '[^']*'/version: '$NEW_VERSION'/" src/cli.ts
          
          # Commit and tag
          git add package.json package-lock.json src/cli.ts
          git commit -m "chore(release): v$NEW_VERSION"
          git tag -a "v$NEW_VERSION" -m "Release v$NEW_VERSION"
          
          # Push changes
          git push origin main
          git push origin "v$NEW_VERSION"
      
      # Extract version from tag (when triggered by tag push)
      - name: Extract version from tag
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        id: tag_version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
      
      - name: Build project
        run: npm run build
      
      - name: Run tests
        run: npm test
      
      - name: Generate changelog
        id: changelog
        run: |
          # Get the current version
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            VERSION="${{ steps.manual_version.outputs.version }}"
          else
            VERSION="${{ steps.tag_version.outputs.version }}"
          fi
          
          # Get the previous tag
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          if [ -z "$PREV_TAG" ]; then
            # First release
            echo "changelog=Initial release of squeaky-clean v$VERSION" >> $GITHUB_OUTPUT
          else
            # Generate changelog from commits
            CHANGELOG=$(git log $PREV_TAG..HEAD --pretty=format:"- %s" | grep -v "^- chore" | head -20)
            
            if [ -z "$CHANGELOG" ]; then
              CHANGELOG="- Minor updates and improvements"
            fi
            
            # Save to output
            {
              echo 'changelog<<EOF'
              echo "## What's Changed"
              echo ""
              echo "$CHANGELOG"
              echo ""
              echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/$PREV_TAG...v$VERSION"
              echo 'EOF'
            } >> $GITHUB_OUTPUT
          fi
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.manual_version.outputs.version || steps.tag_version.outputs.version }}
          name: Release v${{ steps.manual_version.outputs.version || steps.tag_version.outputs.version }}
          body: ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: ${{ contains(steps.manual_version.outputs.version || steps.tag_version.outputs.version, '-') }}
          files: |
            dist/**/*
            README.md
            LICENSE
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Publish to npm (if not prerelease)
        if: ${{ !contains(steps.manual_version.outputs.version || steps.tag_version.outputs.version, '-') }}
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}