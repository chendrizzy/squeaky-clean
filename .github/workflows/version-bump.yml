name: Auto Version Bump

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.github/workflows/**'
      - 'package.json'
      - 'package-lock.json'

jobs:
  bump-version:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Configure Git
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
      
      - name: Check commit messages for version bump type
        id: check_commits
        run: |
          # Get commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          if [ -z "$LAST_TAG" ]; then
            COMMITS=$(git log --pretty=format:"%s")
          else
            COMMITS=$(git log $LAST_TAG..HEAD --pretty=format:"%s")
          fi
          
          # More strict version bump detection for 0.x.x versions
          VERSION_TYPE="patch"  # Default to patch for most changes
          
          # Get current version
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          MAJOR_VERSION=$(echo $CURRENT_VERSION | cut -d. -f1)
          
          echo "Current version: $CURRENT_VERSION (major: $MAJOR_VERSION)"
          
          # For 0.x.x versions, be very strict about minor bumps
          if [ "$MAJOR_VERSION" = "0" ]; then
            # Only bump minor for significant new features with explicit markers
            if echo "$COMMITS" | grep -qE "^feat!(\(.*\))?:|MINOR CHANGE:|FEATURE RELEASE:"; then
              VERSION_TYPE="minor"
              echo "Found explicit minor version indicator"
            # Major bumps only for breaking changes (will become 1.0.0)
            elif echo "$COMMITS" | grep -qE "BREAKING CHANGE:|MAJOR CHANGE:"; then
              VERSION_TYPE="major"
              echo "Found breaking change indicator"
            # Everything else is a patch
            else
              # Even regular feat: commits are patches in 0.x.x
              VERSION_TYPE="patch"
              echo "Defaulting to patch for 0.x.x version"
            fi
          else
            # For 1.x.x and above, use standard conventional commits
            if echo "$COMMITS" | grep -qE "BREAKING CHANGE:|!:"; then
              VERSION_TYPE="major"
            elif echo "$COMMITS" | grep -qE "^feat(\(.*\))?:"; then
              VERSION_TYPE="minor"
            fi
          fi
          
          echo "version_type=$VERSION_TYPE" >> $GITHUB_OUTPUT
          
          # Log the decision for debugging
          echo "Commits analyzed:"
          echo "$COMMITS" | head -10
          echo "---"
          echo "Version bump type: $VERSION_TYPE"
          
          # Check if we should skip (e.g., if last commit was a version bump)
          LAST_COMMIT=$(git log -1 --pretty=format:"%s")
          if echo "$LAST_COMMIT" | grep -qE "^chore\(release\):|\[skip ci\]"; then
            echo "skip=true" >> $GITHUB_OUTPUT
            echo "Skipping: Last commit was a release or has [skip ci]"
          else
            echo "skip=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Bump version
        if: steps.check_commits.outputs.skip == 'false'
        id: version_bump
        run: |
          # Bump version based on commit messages
          npm version ${{ steps.check_commits.outputs.version_type }} --no-git-tag-version
          
          # Get the new version
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          
          # Update version in src/cli.ts if it exists
          if [ -f "src/cli.ts" ]; then
            sed -i "s/version: '[^']*'/version: '$NEW_VERSION'/" src/cli.ts
          fi
          
          echo "Bumped version to: $NEW_VERSION"
      
      - name: Install dependencies
        if: steps.check_commits.outputs.skip == 'false'
        run: npm ci
      
      - name: Build project
        if: steps.check_commits.outputs.skip == 'false'
        run: npm run build
      
      - name: Run tests
        if: steps.check_commits.outputs.skip == 'false'
        run: npm test
      
      - name: Commit version bump
        if: steps.check_commits.outputs.skip == 'false'
        run: |
          git add package.json package-lock.json src/cli.ts
          git commit -m "chore(release): v${{ steps.version_bump.outputs.version }} [skip ci]"
          git push origin main
      
      - name: Create tag
        if: steps.check_commits.outputs.skip == 'false'
        run: |
          git tag -a "v${{ steps.version_bump.outputs.version }}" -m "Release v${{ steps.version_bump.outputs.version }}"
          git push origin "v${{ steps.version_bump.outputs.version }}"